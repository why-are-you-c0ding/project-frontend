"use strict";(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[129],{97650:(e,t,n)=>{n.d(t,{YD:()=>s});var r=n(67294);const i=new Map,o=new WeakMap;let a=0;function u(e,t,n={},r){if(void 0===window.IntersectionObserver&&void 0!==r){const i=e.getBoundingClientRect();return t(r,{isIntersecting:r,target:e,intersectionRatio:"number"==typeof n.threshold?n.threshold:0,time:0,boundingClientRect:i,intersectionRect:i,rootBounds:i}),()=>{}}const{id:u,observer:s,elements:c}=function(e){let t=function(e){return Object.keys(e).sort().filter((t=>void 0!==e[t])).map((t=>{return`${t}_${"root"===t?(n=e.root,n?(o.has(n)||(a+=1,o.set(n,a.toString())),o.get(n)):"0"):e[t]}`;var n})).toString()}(e),n=i.get(t);if(!n){const r=new Map;let o;const a=new IntersectionObserver((t=>{t.forEach((t=>{var n;const i=t.isIntersecting&&o.some((e=>t.intersectionRatio>=e));e.trackVisibility&&void 0===t.isVisible&&(t.isVisible=i),null==(n=r.get(t.target))||n.forEach((e=>{e(i,t)}))}))}),e);o=a.thresholds||(Array.isArray(e.threshold)?e.threshold:[e.threshold||0]),n={id:t,observer:a,elements:r},i.set(t,n)}return n}(n);let l=c.get(e)||[];return c.has(e)||c.set(e,l),l.push(t),s.observe(e),function(){l.splice(l.indexOf(t),1),0===l.length&&(c.delete(e),s.unobserve(e)),0===c.size&&(s.disconnect(),i.delete(u))}}function s({threshold:e,delay:t,trackVisibility:n,rootMargin:i,root:o,triggerOnce:a,skip:s,initialInView:c,fallbackInView:l,onChange:f}={}){var v;const[d,h]=r.useState(null),p=r.useRef(),[y,g]=r.useState({inView:!!c,entry:void 0});p.current=f,r.useEffect((()=>{if(s||!d)return;let r=u(d,((e,t)=>{g({inView:e,entry:t}),p.current&&p.current(e,t),t.isIntersecting&&a&&r&&(r(),r=void 0)}),{root:o,rootMargin:i,threshold:e,trackVisibility:n,delay:t},l);return()=>{r&&r()}}),[Array.isArray(e)?e.toString():e,d,o,i,a,s,n,l,t]);const b=null==(v=y.entry)?void 0:v.target;r.useEffect((()=>{d||!b||a||s||g({inView:!!c,entry:void 0})}),[d,b,a,s,c]);const w=[h,y.inView,y.entry];return w.ref=w[0],w.inView=w[1],w.entry=w[2],w}r.Component},44593:(e,t,n)=>{n.d(t,{ZP:()=>w});var r=n(67294),i=n(8100),o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},o.apply(this,arguments)};var a,u,s=function(){},c=s(),l=Object,f=function(e){return e===c},v=function(e){return"function"==typeof e},d="undefined"==typeof window||"Deno"in window?r.useEffect:r.useLayoutEffect,h=new WeakMap,p=0,y=function(e){var t,n,r=typeof e,i=e&&e.constructor,o=i==Date;if(l(e)!==e||o||i==RegExp)t=o?e.toJSON():"symbol"==r?e.toString():"string"==r?JSON.stringify(e):""+e;else{if(t=h.get(e))return t;if(t=++p+"~",h.set(e,t),i==Array){for(t="@",n=0;n<e.length;n++)t+=y(e[n])+",";h.set(e,t)}if(i==l){t="#";for(var a=l.keys(e).sort();!f(n=a.pop());)f(e[n])||(t+=n+":"+y(e[n])+",");h.set(e,t)}}return t},g=function(e){if(v(e))try{e=e()}catch(t){e=""}var t=[].concat(e);return[e="string"==typeof e?e:(Array.isArray(e)?e.length:e)?y(e):"",t,e?"$swr$"+e:""]},b=function(e){return v(e[1])?[e[0],e[1],e[2]||{}]:[e[0],null,(null===e[1]?e[2]:e[1])||{}]},w=(a=i.ZP,u=function(e){return function(t,n,i){var o=(0,r.useState)({})[1],a=(0,r.useRef)(!1),u=(0,r.useRef)(),s=i.cache,l=i.initialSize,h=void 0===l?1:l,p=i.revalidateAll,y=void 0!==p&&p,b=i.persistSize,w=void 0!==b&&b,k=i.revalidateFirstPage,m=void 0===k||k,S=i.revalidateOnMount,V=void 0!==S&&S,O=null;try{O=function(e){return g(e?e(0,null):null)[0]}(t)}catch(e){}var R=null,$=null;O&&(R="$ctx$"+O,$="$len$"+O);var C=(0,r.useCallback)((function(){var e=s.get($);return f(e)?h:e}),[$,h]),x=(0,r.useRef)(C());d((function(){a.current?O&&s.set($,w?x.current:h):a.current=!0}),[O]);var A=V&&!a.current,E=e(O?"$inf$"+O:null,(function(){return e=void 0,r=void 0,a=function(){var e,r,o,a,c,l,v,d,h,p,b,w;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(k){switch(k.label){case 0:e=s.get(R)||[],r=e[0],o=e[1],a=[],c=C(),l=null,v=0,k.label=1;case 1:return v<c?(d=g(t(v,l)),h=d[0],p=d[1],h?(b=s.get(h),w=y||r||f(b)||m&&!v&&!f(u.current)||A||o&&!f(o[v])&&!i.compare(o[v],b),n&&w?[4,n.apply(void 0,p)]:[3,3]):[3,5]):[3,5];case 2:b=k.sent(),s.set(h,b),k.label=3;case 3:a.push(b),l=b,k.label=4;case 4:return++v,[3,1];case 5:return s.delete(R),[2,a]}}))},new((o=void 0)||(o=Promise))((function(t,n){function i(e){try{s(a.next(e))}catch(e){n(e)}}function u(e){try{s(a.throw(e))}catch(e){n(e)}}function s(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(i,u)}s((a=a.apply(e,r||[])).next())}));var e,r,o,a}),i);d((function(){u.current=E.data}),[E.data]);var I=(0,r.useCallback)((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0],r=!1!==e[1];if(R){if(r)if(f(n))s.set(R,[!0]);else{var i=u.current;s.set(R,[!1,i])}return e.length?E.mutate(n,r):E.mutate()}}),[R]),M=(0,r.useCallback)((function(e){var n;if($&&(v(e)?n=e(C()):"number"==typeof e&&(n=e),"number"==typeof n))return s.set($,n),x.current=n,o({}),I(function(e){for(var n=[],r=null,i=0;i<e;++i){var o=g(t(i,r))[0],a=o?s.get(o):c;if(f(a))return u.current;n.push(a),r=a}return n}(n))}),[$,C,I]);return{size:C(),setSize:M,mutate:I,get error(){return E.error},get data(){return E.data},get isValidating(){return E.isValidating}}}},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=b(e),r=n[0],i=n[1],s=n[2],c=(s.use||[]).concat(u);return a(r,i,o(o({},s),{use:c}))})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,